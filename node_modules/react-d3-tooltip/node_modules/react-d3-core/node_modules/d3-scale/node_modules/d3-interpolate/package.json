{
  "name": "d3-interpolate",
  "version": "0.7.0",
  "description": "Interpolate numbers, colors, strings, arrays, objects, whatever!",
  "keywords": [
    "d3",
    "interpolate",
    "interpolation",
    "color"
  ],
  "homepage": "https://github.com/d3/d3-interpolate",
  "license": "BSD-3-Clause",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "main": "build/d3-interpolate.js",
  "jsnext:main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/d3/d3-interpolate.git"
  },
  "scripts": {
    "pretest": "mkdir -p build && node -e 'process.stdout.write(\"var version = \\\"\" + require(\"./package.json\").version + \"\\\"; export * from \\\"../index\\\"; export {version};\");' > build/bundle.js && rollup -f umd -g d3-color:d3_color -n d3_interpolate -o build/d3-interpolate.js -- build/bundle.js",
    "test": "faucet `find test -name '*-test.js'` && eslint index.js src test",
    "prepublish": "npm run test && uglifyjs build/d3-interpolate.js -c -m -o build/d3-interpolate.min.js && rm -f build/d3-interpolate.zip && zip -j build/d3-interpolate.zip -- LICENSE README.md build/d3-interpolate.js build/d3-interpolate.min.js",
    "postpublish": "VERSION=`node -e 'console.log(require(\"./package.json\").version)'`; git push && git push --tags && cp build/d3-interpolate.js ../d3.github.com/d3-interpolate.v0.7.js && cp build/d3-interpolate.min.js ../d3.github.com/d3-interpolate.v0.7.min.js && cd ../d3.github.com && git add d3-interpolate.v0.7.js d3-interpolate.v0.7.min.js && git commit -m \"d3-interpolate ${VERSION}\" && git push"
  },
  "dependencies": {
    "d3-color": "~0.4.0"
  },
  "devDependencies": {
    "faucet": "0.0",
    "rollup": "0.25",
    "tape": "4",
    "uglify-js": "2"
  },
  "readme": "# d3-interpolate\n\nThis module provides a variety of interpolation methods for blending between two values. Values may be numbers, colors, strings, arrays, or even deeply-nested objects. For example:\n\n```js\nvar i = d3.interpolateNumber(10, 20);\ni(0.0); // 10\ni(0.2); // 12\ni(0.5); // 15\ni(1.0); // 20\n```\n\nThe returned function `i` is called an *interpolator*. Given a starting value *a* and an ending value *b*, it takes a parameter *t* in the domain [0, 1] and returns the corresponding interpolated value between *a* and *b*. An interpolator typically returns a value equivalent to *a* at *t* = 0 and a value equivalent to *b* at *t* = 1.\n\nYou can interpolate more than just numbers. To find the perceptual midpoint between steelblue and brown:\n\n```js\nd3.interpolateLab(\"steelblue\", \"brown\")(0.5); // \"rgb(142, 92, 109)\"\n```\n\nHere’s a more elaborate example demonstrating type inference used by [interpolate](#interpolate):\n\n```js\nvar i = d3.interpolate({colors: [\"red\", \"blue\"]}, {colors: [\"white\", \"black\"]});\ni(0.0); // {colors: [\"rgb(255, 0, 0)\", \"rgb(0, 0, 255)\"]}\ni(0.5); // {colors: [\"rgb(255, 128, 128)\", \"rgb(0, 0, 128)\"]}\ni(1.0); // {colors: [\"rgb(255, 255, 255)\", \"rgb(0, 0, 0)\"]}\n```\n\nNote that the generic value interpolator detects not only nested objects and arrays, but also color strings and numbers embedded in strings!\n\n## Installing\n\nIf you use NPM, `npm install d3-interpolate`. Otherwise, download the [latest release](https://github.com/d3/d3-interpolate/releases/latest). You can also load directly from [d3js.org](https://d3js.org), either as a [standalone library](https://d3js.org/d3-interpolate.v0.7.min.js) or as part of [D3 4.0 alpha](https://github.com/mbostock/d3/tree/4). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3_interpolate` global is exported:\n\n```html\n<script src=\"https://d3js.org/d3-color.v0.4.min.js\"></script>\n<script src=\"https://d3js.org/d3-interpolate.v0.7.min.js\"></script>\n<script>\n\nvar interpolate = d3_interpolate.interpolateRgb(\"steelblue\", \"brown\");\n\n</script>\n```\n\n[Try d3-interpolate in your browser.](https://tonicdev.com/npm/d3-interpolate)\n\n## API Reference\n\n<a name=\"interpolate\" href=\"#interpolate\">#</a> d3.<b>interpolate</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two arbitrary values *a* and *b*. The interpolator implementation is based on the type of the end value *b*, using the following algorithm:\n\n1. If *b* is null, undefined or a boolean, use the constant *b*.\n2. If *b* is a number, use [interpolateNumber](#interpolateNumber).\n3. If *b* is a [color](https://github.com/d3/d3-color#color) or a string coercible to a color, use [interpolateRgb](#interpolateRgb).\n4. If *b* is a string, use [interpolateString](#interpolateString).\n5. If *b* is an [array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray), use [interpolateArray](#interpolateArray).\n6. Use [interpolateObject](#interpolateObject).\n\nBased on the chosen interpolator, *a* is coerced to the suitable corresponding type.\n\n<a name=\"interpolateNumber\" href=\"#interpolateNumber\">#</a> d3.<b>interpolateNumber</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two numbers *a* and *b*. The returned interpolator is equivalent to:\n\n```js\nfunction interpolate(t) {\n  return a * (1 - t) + b * t;\n}\n```\n\nCaution: avoid interpolating to or from the number zero when the interpolator is used to generate a string. When very small values are stringified, they may be converted to scientific notation, which is an invalid attribute or style property value. For example, the number `0.0000001` is converted to the string `\"1e-7\"`. This is particularly noticeable with interpolating opacity. To avoid scientific notation, start or end the transition at 1e-6: the smallest value that is not stringified in scientific notation.\n\n<a name=\"interpolateRound\" href=\"#interpolateRound\">#</a> d3.<b>interpolateRound</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two numbers *a* and *b*; the interpolator is similar to [interpolateNumber](#interpolateNumber), except it will round the resulting value to the nearest integer.\n\n<a name=\"interpolateString\" href=\"#interpolateString\">#</a> d3.<b>interpolateString</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two strings *a* and *b*. The string interpolator finds numbers embedded in *a* and *b*, where each number is of the form understood by JavaScript. A few examples of numbers that will be detected within a string: `-1`, `42`, `3.14159`, and `6.0221413e+23`.\n\nFor each number embedded in *b*, the interpolator will attempt to find a corresponding number in *a*. If a corresponding number is found, a numeric interpolator is created using [interpolateNumber](#interpolateNumber). The remaining parts of the string *b* are used as a template: the static parts of the string *b* remain constant for the interpolation, with the interpolated numeric values embedded in the template.\n\nFor example, if *a* is `\"300 12px sans-serif\"`, and *b* is `\"500 36px Comic-Sans\"`, two embedded numbers are found. The remaining static parts of the string are a space between the two numbers (`\" \"`), and the suffix (`\"px Comic-Sans\"`). The result of the interpolator at *t* = 0.5 is `\"400 24px Comic-Sans\"`.\n\n<a name=\"interpolateArray\" href=\"#interpolateArray\">#</a> d3.<b>interpolateArray</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two arrays *a* and *b*. Internally, an array template is created that is the same length in *b*. For each element in *b*, if there exists a corresponding element in *a*, a generic interpolator is created for the two elements using [interpolate](#interpolate). If there is no such element, the static value from *b* is used in the template. Then, for the given parameter *t*, the template’s embedded interpolators are evaluated. The updated array template is then returned.\n\nFor example, if *a* is the array `[0, 1]` and *b* is the array `[1, 10, 100]`, then the result of the interpolator for *t* = 0.5 is the array `[0.5, 5.5, 100]`.\n\nNote: **no defensive copy** of the template array is created; modifications of the returned array may adversely affect subsequent evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](https://github.com/d3/d3-transition).\n\n<a name=\"interpolateObject\" href=\"#interpolateObject\">#</a> d3.<b>interpolateObject</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two objects *a* and *b*. Internally, an object template is created that has the same properties as *b*. For each property in *b*, if there exists a corresponding property in *a*, a generic interpolator is created for the two elements using [interpolate](#interpolate). If there is no such property, the static value from *b* is used in the template. Then, for the given parameter *t*, the template's embedded interpolators are evaluated and the updated object template is then returned.\n\nFor example, if *a* is the object `{x: 0, y: 1}` and *b* is the object `{x: 1, y: 10, z: 100}`, the result of the interpolator for *t* = 0.5 is the object `{x: 0.5, y: 5.5, z: 100}`.\n\nObject interpolation is particularly useful for *dataspace interpolation*, where data is interpolated rather than attribute values. For example, you can interpolate an object which describes an arc in a pie chart, and then use d3.svg.arc to compute the new SVG path data.\n\nNote: **no defensive copy** of the template object is created; modifications of the returned object may adversely affect subsequent evaluation of the interpolator. No copy is made for performance reasons; interpolators are often part of the inner loop of [animated transitions](https://github.com/d3/d3-transition).\n\n<a name=\"interpolateTransformCss\" href=\"#interpolateTransformCss\">#</a> d3.<b>interpolateTransformCss</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two 2D CSS transforms represented by *a* and *b*. Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated. This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).\n\n<a name=\"interpolateTransformSvg\" href=\"#interpolateTransformSvg\">#</a> d3.<b>interpolateTransformSvg</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two 2D SVG transforms represented by *a* and *b*. Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated. This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).\n\n<a name=\"interpolateZoom\" href=\"#interpolateZoom\">#</a> d3.<b>interpolateZoom</b>(<i>a</i>, <i>b</i>)\n\nReturns an interpolator between the two views *a* and *b* of a two-dimensional plane, based on [“Smooth and efficient zooming and panning”](https://www.google.com/search?q=Smooth+and+efficient+zooming+and+panning) by Jarke J. van Wijk and Wim A.A. Nuij. Each view is defined as an array of three numbers: *cx*, *cy* and *width*. The first two coordinates *cx*, *cy* represent the center of the viewport; the last coordinate *width* represents the size of the viewport.\n\nThe returned interpolator exposes a *duration* property which encodes the recommended transition duration in milliseconds. This duration is based on the path length of the curved trajectory through *x,y* space. If you want to a slower or faster transition, multiply this by an arbitrary scale factor (<i>V</i> as described in the original paper).\n\n<a name=\"interpolateRgb\" href=\"#interpolateRgb\">#</a> d3.<b>interpolateRgb</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/rgb.png\" width=\"100%\" height=\"40\" alt=\"rgb\">\n\nOr, with a corrected [gamma](#interpolate_gamma) of 2.2:\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/rgbGamma.png\" width=\"100%\" height=\"40\" alt=\"rgbGamma\">\n\nReturns an RGB color space interpolator between the two colors *a* and *b* with a configurable [gamma](#interpolate_gamma). If the gamma is not specified, it defaults to 1.0. The colors *a* and *b* need not be in RGB; they will be converted to RGB using [color.rgb](https://github.com/d3/d3-color#rgb). The return value of the interpolator is an RGB string.\n\n<a name=\"interpolateHsl\" href=\"#interpolateHsl\">#</a> d3.<b>interpolateHsl</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/hsl.png\" width=\"100%\" height=\"40\" alt=\"hsl\">\n\nReturns an HSL color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HSL; they will be converted to HSL using [color.hsl](https://github.com/d3/d3-color#hsl). If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n\n<a name=\"interpolateHslLong\" href=\"#interpolateHslLong\">#</a> d3.<b>interpolateHslLong</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/hslLong.png\" width=\"100%\" height=\"40\" alt=\"hslLong\">\n\nLike [interpolateHsl](#interpolateHsl), but does not use the shortest path between hues.\n\n<a name=\"interpolateLab\" href=\"#interpolateLab\">#</a> d3.<b>interpolateLab</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/lab.png\" width=\"100%\" height=\"40\" alt=\"lab\">\n\nReturns a Lab color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in Lab; they will be converted to Lab using [color.lab](https://github.com/d3/d3-color#lab). The return value of the interpolator is an RGB string.\n\n<a name=\"interpolateHcl\" href=\"#interpolateHcl\">#</a> d3.<b>interpolateHcl</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/hcl.png\" width=\"100%\" height=\"40\" alt=\"hcl\">\n\nReturns an HCL color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HCL; they will be converted to HCL using [color.hcl](https://github.com/d3/d3-color#hcl). If either color’s hue or chroma is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n\n<a name=\"interpolateHclLong\" href=\"#interpolateHclLong\">#</a> d3.<b>interpolateHclLong</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/hclLong.png\" width=\"100%\" height=\"40\" alt=\"hclLong\">\n\nLike [interpolateHcl](#interpolateHcl), but does not use the shortest path between hues.\n\n<a name=\"interpolateCubehelix\" href=\"#interpolateCubehelix\">#</a> d3.<b>interpolateCubehelix</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/cubehelix.png\" width=\"100%\" height=\"40\" alt=\"cubehelix\">\n\nOr, with a [gamma](#interpolate_gamma) of 3.0 to emphasize high-intensity values:\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/cubehelixGamma.png\" width=\"100%\" height=\"40\" alt=\"cubehelixGamma\">\n\nReturns a Cubehelix color space interpolator between the two colors *a* and *b* using a configurable [gamma](#interpolate_gamma). If the gamma is not specified, it defaults to 1.0. The colors *a* and *b* need not be in Cubehelix; they will be converted to Cubehelix using [color.cubehelix](https://github.com/d3/d3-color#cubehelix). If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.\n\n<a name=\"interpolateCubehelixLong\" href=\"#interpolateCubehelixLong\">#</a> d3.<b>interpolateCubehelixLong</b>(<i>a</i>, <i>b</i>)\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/cubehelixLong.png\" width=\"100%\" height=\"40\" alt=\"cubehelixLong\">\n\nOr, with a [gamma](#interpolate_gamma) of 3.0 to emphasize high-intensity values:\n\n<img src=\"https://raw.githubusercontent.com/d3/d3-interpolate/master/img/cubehelixGammaLong.png\" width=\"100%\" height=\"40\" alt=\"cubehelixGammaLong\">\n\nLike [interpolateCubehelix](#interpolateCubehelix), but does not use the shortest path between hues.\n\n### Gamma Correction\n\n<a name=\"interpolate_gamma\" href=\"#interpolate_gamma\">#</a> <i>interpolate</i>.<b>gamma</b>(<i>gamma</i>)\n\nGiven that *interpolate* is one of [interpolateRgb](#interpolateRgb), [interpolateCubehelix](#interpolateCubehelix) or [interpolateCubehelixLong](#interpolateCubehelixLong), returns a new interpolator factory of the same type using the specified *gamma*. For example, to interpolate from purple to orange with a gamma of 2.2 in RGB space:\n\n```js\nvar interpolate = d3.interpolateRgb.gamma(2.2)(\"purple\", \"orange\");\n```\n\nSee Eric Brasseur’s article, [Gamma error in picture scaling](https://web.archive.org/web/20160112115812/http://www.4p8.com/eric.brasseur/gamma.html), for more on gamma correction.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/d3/d3-interpolate/issues"
  },
  "_id": "d3-interpolate@0.7.0",
  "_from": "d3-interpolate@~0.7.0"
}
