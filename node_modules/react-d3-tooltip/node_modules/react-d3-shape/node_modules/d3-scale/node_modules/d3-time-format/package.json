{
  "name": "d3-time-format",
  "version": "0.3.1",
  "description": "A JavaScript time formatter and parser inspired by strftime and strptime.",
  "keywords": [
    "d3",
    "time",
    "format",
    "strftime",
    "strptime"
  ],
  "homepage": "https://github.com/d3/d3-time-format",
  "license": "BSD-3-Clause",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "main": "build/d3-time-format.js",
  "jsnext:main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/d3/d3-time-format.git"
  },
  "scripts": {
    "pretest": "mkdir -p build && node -e 'process.stdout.write(\"var version = \\\"\" + require(\"./package.json\").version + \"\\\"; export * from \\\"../index\\\"; export {version};\");' > build/bundle.js && rollup -f umd -g d3-time:d3_time -n d3_time_format -o build/d3-time-format.js -- build/bundle.js",
    "test": "TZ=America/Los_Angeles faucet `find test -name '*-test.js'` && eslint index.js src",
    "prepublish": "npm run test && uglifyjs build/d3-time-format.js -c -m -o build/d3-time-format.min.js && rm -f build/d3-time-format.zip && zip -j build/d3-time-format.zip -- LICENSE README.md build/d3-time-format.js build/d3-time-format.min.js",
    "postpublish": "VERSION=`node -e 'console.log(require(\"./package.json\").version)'`; git push && git tag -am \"Release $VERSION.\" v${VERSION} && git push --tags && cp build/d3-time-format.js ../d3.github.com/d3-time-format.v0.3.js && cp build/d3-time-format.min.js ../d3.github.com/d3-time-format.v0.3.min.js && cd ../d3.github.com && git add d3-time-format.v0.3.js d3-time-format.v0.3.min.js && git commit -m \"d3-time-format ${VERSION}\" && git push"
  },
  "dependencies": {
    "d3-time": "~0.2.0"
  },
  "devDependencies": {
    "faucet": "0.0",
    "rollup": "0.25",
    "tape": "4",
    "uglify-js": "2"
  },
  "readme": "# d3-time-format\n\nThis module provides a JavaScript implementation of the venerable [strptime](http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html) and [strftime](http://pubs.opengroup.org/onlinepubs/007908799/xsh/strftime.html) functions from the C standard library, and can be used to parse or format [dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) in a variety of locale-specific representations. To format a date, create a [formatter](#locale_format) from a specifier (a string with the desired format *directives*, indicated by `%`); then pass a date to the formatter, which returns a string. For example, to convert the current date to a human-readable string:\n\n```js\nvar formatTime = d3.timeFormat(\"%B %d, %Y\");\nformatTime(new Date); // \"June 30, 2015\"\n```\n\nLikewise, to convert a string back to a date, create a [parser](#locale_parse):\n\n```js\nvar parseTime = d3.timeParse(\"%B %d, %Y\");\nparseTime(\"June 30, 2015\"); // Tue Jun 30 2015 00:00:00 GMT-0700 (PDT)\n```\n\nYou can implement more elaborate conditional time formats, too. For example, here’s a [multi-scale time format](http://bl.ocks.org/mbostock/4149176) using [time intervals](https://github.com/d3/d3-time):\n\n```js\nvar formatMillisecond = d3.timeFormat(\".%L\"),\n    formatSecond = d3.timeFormat(\":%S\"),\n    formatMinute = d3.timeFormat(\"%I:%M\"),\n    formatHour = d3.timeFormat(\"%I %p\"),\n    formatDay = d3.timeFormat(\"%a %d\"),\n    formatWeek = d3.timeFormat(\"%b %d\"),\n    formatMonth = d3.timeFormat(\"%B\"),\n    formatYear = d3.timeFormat(\"%Y\");\n\nfunction multiFormat(date) {\n  return (d3.timeSecond(date) < date ? formatMillisecond\n      : d3.timeMinute(date) < date ? formatSecond\n      : d3.timeHour(date) < date ? formatMinute\n      : d3.timeDay(date) < date ? formatHour\n      : d3.timeMonth(date) < date ? (d3.timeWeek(date) < date ? formatDay : formatWeek)\n      : d3.timeYear(date) < date ? formatMonth\n      : formatYear)(date);\n}\n```\n\nThis module is used by D3 [time scales](https://github.com/d3/d3-scale#time-scales) to generate human-readable ticks.\n\n## Installing\n\nIf you use NPM, `npm install d3-time-format`. Otherwise, download the [latest release](https://github.com/d3/d3-time-format/releases/latest). The released bundle supports AMD, CommonJS, and vanilla environments. Create a custom build using [Rollup](https://github.com/rollup/rollup) or your preferred bundler. You can also load directly from [d3js.org](https://d3js.org):\n\n```html\n<script src=\"https://d3js.org/d3-time.v0.2.min.js\"></script>\n<script src=\"https://d3js.org/d3-time-format.v0.3.min.js\"></script>\n```\n\nIn a vanilla environment, a `d3_time_format` global is exported. [Try d3-time-format in your browser.](https://tonicdev.com/npm/d3-time-format)\n\n## API Reference\n\n<a name=\"timeFormat\" href=\"#timeFormat\">#</a> d3.<b>timeFormat</b>(<i>specifier</i>)\n\nAn alias for [*locale*.format](#locale_format) on the [U.S. English locale](#timeFormatEnUs). See the other [locales](#locales).\n\n<a name=\"timeParse\" href=\"#timeParse\">#</a> d3.<b>timeParse</b>(<i>specifier</i>)\n\nAn alias for [*locale*.parse](#locale_parse) on the [U.S. English locale](#timeFormatEnUs). See the other [locales](#locales).\n\n<a name=\"utcFormat\" href=\"#utcFormat\">#</a> d3.<b>utcFormat</b>(<i>specifier</i>)\n\nAn alias for [*locale*.utcFormat](#locale_utcFormat) on the [U.S. English locale](#localeEnUs). See the other [locales](#locales).\n\n<a name=\"utcParse\" href=\"#utcParse\">#</a> d3.<b>utcParse</b>(<i>specifier</i>)\n\nAn alias for [*locale*.utcParse](#locale_utcParse) on the [U.S. English locale](#localeEnUs). See the other [locales](#locales).\n\n<a name=\"isoFormat\" href=\"#isoFormat\">#</a> d3.<b>isoFormat</b>\n\nThe full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time formatter. Where available, this method will use [Date.toISOString](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString) to format.\n\n<a name=\"isoParse\" href=\"#isoParse\">#</a> d3.<b>isoParse</b>\n\nThe full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time parser. Where available, this method will use the [Date constructor](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date) to parse strings. If you depend on strict validation of the input format according to ISO 8601, you should construct a [UTC parser function](#utcParse):\n\n```js\nvar strictIsoParse = d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n```\n\n<a name=\"locale_format\" href=\"#locale_format\">#</a> <i>locale</i>.<b>format</b>(<i>specifier</i>)\n\nReturns a new formatter for the given string *specifier*. The specifier string may contain the following directives:\n\n* `%a` - abbreviated weekday name.*\n* `%A` - full weekday name.*\n* `%b` - abbreviated month name.*\n* `%B` - full month name.*\n* `%c` - the locale’s date and time, such as `%a %b %e %H:%M:%S %Y`.*\n* `%d` - zero-padded day of the month as a decimal number [01,31].\n* `%e` - space-padded day of the month as a decimal number [ 1,31]; equivalent to `%_d`.\n* `%H` - hour (24-hour clock) as a decimal number [00,23].\n* `%I` - hour (12-hour clock) as a decimal number [01,12].\n* `%j` - day of the year as a decimal number [001,366].\n* `%m` - month as a decimal number [01,12].\n* `%M` - minute as a decimal number [00,59].\n* `%L` - milliseconds as a decimal number [000, 999].\n* `%p` - either AM or PM.*\n* `%S` - second as a decimal number [00,61].\n* `%U` - Sunday-based week of the year as a decimal number [00,53].\n* `%w` - Sunday-based weekday as a decimal number [0,6].\n* `%W` - Monday-based week of the year as a decimal number [00,53].\n* `%x` - the locale’s date, such as `%m/%d/%Y`.*\n* `%X` - the locale’s time, such as `%H:%M:%S`.*\n* `%y` - year without century as a decimal number [00,99].\n* `%Y` - year with century as a decimal number.\n* `%Z` - time zone offset, such as `-0700`, `-07:00`, `-07`, or `Z`.\n* `%%` - a literal percent sign (`%`).\n\nDirectives marked with an asterisk (*) may be affected by the [locale definition](#localeFormat). For `%U`, all days in a new year preceding the first Sunday are considered to be in week 0. For `%W`, all days in a new year preceding the first Monday are considered to be in week 0. Week numbers are computed using [*interval*.count](https://github.com/d3/d3-time#interval_count).\n\nThe `%` sign indicating a directive may be immediately followed by a padding modifier:\n\n* `0` - zero-padding\n* `_` - space-padding\n* `-` - disable padding\n\nIf no padding modifier is specified, the default is `0` for all directives except `%e`, which defaults to `_`. (In some implementations of strftime and strptime, a directive may include an optional field width or precision; this feature is not yet implemented.)\n\nThe returned function formats a specified *[date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date)*, returning the corresponding string.\n\n```js\nvar formatMonth = d3.timeFormat(\"%B\"),\n    formatDay = d3.timeFormat(\"%A\"),\n    date = new Date(2014, 4, 1); // Thu May 01 2014 00:00:00 GMT-0700 (PDT)\n\nformatMonth(date); // \"May\"\nformatDay(date); // \"Thursday\"\n```\n\n<a name=\"locale_parse\" href=\"#locale_parse\">#</a> <i>locale</i>.<b>parse</b>(<i>specifier</i>)\n\nReturns a new parser for the given string *specifier*. The specifier string may contain the same directives as [*locale*.format](#locale_format). The `%d` and `%e` directives are considered equivalent for parsing.\n\nThe returned function parses a specified *string*, returning the corresponding [date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) or null if the string could not be parsed according to this format’s specifier. Parsing is strict: if the specified <i>string</i> does not exactly match the associated specifier, this method returns null. For example, if the associated specifier is `%Y-%m-%dT%H:%M:%SZ`, then the string `\"2011-07-01T19:15:28Z\"` will be parsed as expected, but `\"2011-07-01T19:15:28\"`, `\"2011-07-01 19:15:28\"` and `\"2011-07-01\"` will return null. (Note that the literal `Z` here is different from the time zone offset directive `%Z`.) If a more flexible parser is desired, try multiple formats sequentially until one returns non-null.\n\n<a name=\"locale_utcFormat\" href=\"#locale_utcFormat\">#</a> <i>locale</i>.<b>utcFormat</b>(<i>specifier</i>)\n\nEquivalent to [*locale*.format](#locale_format), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.\n\n<a name=\"locale_utcParse\" href=\"#locale_utcParse\">#</a> <i>locale</i>.<b>utcParse</b>(<i>specifier</i>)\n\nEquivalent to [*locale*.parse](#locale_parse), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.\n\n### Locales\n\n<a name=\"timeFormatLocale\" href=\"#timeFormatLocale\">#</a> d3.<b>timeFormatLocale</b>(<i>definition</i>)\n\nReturns a *locale* object for the specified *definition* with [*locale*.format](#locale_format), [*locale*.parse](#locale_parse), [*locale*.utcFormat](#locale_utcFormat), [*locale*.utcParse](#locale_utcParse) methods. The *definition* must include the following properties:\n\n* `dateTime` - the date and time (`%c`) format specifier (<i>e.g.</i>, `\"%a %b %e %X %Y\"`).\n* `date` - the date (`%x`) format specifier (<i>e.g.</i>, `\"%m/%d/%Y\"`).\n* `time` - the time (`%X`) format specifier (<i>e.g.</i>, `\"%H:%M:%S\"`).\n* `periods` - the A.M. and P.M. equivalents (<i>e.g.</i>, `[\"AM\", \"PM\"]`).\n* `days` - the full names of the weekdays, starting with Sunday.\n* `shortDays` - the abbreviated names of the weekdays, starting with Sunday.\n* `months` - the full names of the months (starting with January).\n* `shortMonths` - the abbreviated names of the months (starting with January).\n\n<a name=\"timeFormatCaEs\" href=\"#timeFormatCaEs\">#</a> d3.<b>timeFormatCaEs</b>\n\n[Catalan (Spain)](https://github.com/d3/d3-time-format/tree/master/src/locale/ca-ES.js)\n\n<a name=\"timeFormatDeCh\" href=\"#timeFormatDeCh\">#</a> d3.<b>timeFormatDeCh</b>\n\n[German (Switzerland)](https://github.com/d3/d3-time-format/tree/master/src/locale/de-CH.js)\n\n<a name=\"timeFormatDeDe\" href=\"#timeFormatDeDe\">#</a> d3.<b>timeFormatDeDe</b>\n\n[German (Germany)](https://github.com/d3/d3-time-format/tree/master/src/locale/de-DE.js)\n\n<a name=\"timeFormatEnCa\" href=\"#timeFormatEnCa\">#</a> d3.<b>timeFormatEnCa</b>\n\n[English (Canada)](https://github.com/d3/d3-time-format/tree/master/src/locale/en-CA.js)\n\n<a name=\"timeFormatEnGb\" href=\"#timeFormatEnGb\">#</a> d3.<b>timeFormatEnGb</b>\n\n[English (United Kingdom)](https://github.com/d3/d3-time-format/tree/master/src/locale/en-GB.js)\n\n<a name=\"timeFormatEnUs\" href=\"#timeFormatEnUs\">#</a> d3.<b>timeFormatEnUs</b>\n\n[English (United States)](https://github.com/d3/d3-time-format/tree/master/src/locale/en-US.js)\n\n<a name=\"timeFormatEsEs\" href=\"#timeFormatEsEs\">#</a> d3.<b>timeFormatEsEs</b>\n\n[Spanish (Spain)](https://github.com/d3/d3-time-format/tree/master/src/locale/es-ES.js)\n\n<a name=\"timeFormatFiFi\" href=\"#timeFormatFiFi\">#</a> d3.<b>timeFormatFiFi</b>\n\n[Finnish (Finland)](https://github.com/d3/d3-time-format/tree/master/src/locale/fi-FI.js)\n\n<a name=\"timeFormatFrCa\" href=\"#timeFormatFrCa\">#</a> d3.<b>timeFormatFrCa</b>\n\n[French (Canada)](https://github.com/d3/d3-time-format/tree/master/src/locale/fr-CA.js)\n\n<a name=\"timeFormatFrFr\" href=\"#timeFormatFrFr\">#</a> d3.<b>timeFormatFrFr</b>\n\n[French (France)](https://github.com/d3/d3-time-format/tree/master/src/locale/fr-FR.js)\n\n<a name=\"timeFormatHeIl\" href=\"#timeFormatHeIl\">#</a> d3.<b>timeFormatHeIl</b>\n\n[Hebrew (Israel)](https://github.com/d3/d3-time-format/tree/master/src/locale/he-IL.js)\n\n<a name=\"timeFormatHuHu\" href=\"#timeFormatHuHu\">#</a> d3.<b>timeFormatHuHu</b>\n\n[Hungarian (Hungary)](https://github.com/d3/d3-time-format/tree/master/src/locale/hu-HU.js)\n\n<a name=\"timeFormatItIt\" href=\"#timeFormatItIt\">#</a> d3.<b>timeFormatItIt</b>\n\n[Italian (Italy)](https://github.com/d3/d3-time-format/tree/master/src/locale/it-IT.js)\n\n<a name=\"timeFormatJaJp\" href=\"#timeFormatJaJp\">#</a> d3.<b>timeFormatJaJp</b>\n\n[Japanese (Japan)](https://github.com/d3/d3-time-format/tree/master/src/locale/ja-JP.js)\n\n<a name=\"timeFormatKoKr\" href=\"#timeFormatKoKr\">#</a> d3.<b>timeFormatKoKr</b>\n\n[Korean (South Korea)](https://github.com/d3/d3-time-format/tree/master/src/locale/ko-KR.js)\n\n<a name=\"timeFormatMkMk\" href=\"#timeFormatMkMk\">#</a> d3.<b>timeFormatMkMk</b>\n\n[Macedonian (Macedonia)](https://github.com/d3/d3-time-format/tree/master/src/locale/mk-MK.js)\n\n<a name=\"timeFormatNlNl\" href=\"#timeFormatNlNl\">#</a> d3.<b>timeFormatNlNl</b>\n\n[Dutch (Netherlands)](https://github.com/d3/d3-time-format/tree/master/src/locale/nl-NL.js)\n\n<a name=\"timeFormatPlPl\" href=\"#timeFormatPlPl\">#</a> d3.<b>timeFormatPlPl</b>\n\n[Polish (Poland)](https://github.com/d3/d3-time-format/tree/master/src/locale/pl-PL.js)\n\n<a name=\"timeFormatPtBr\" href=\"#timeFormatPtBr\">#</a> d3.<b>timeFormatPtBr</b>\n\n[Portuguese (Brazil)](https://github.com/d3/d3-time-format/tree/master/src/locale/pt-BR.js)\n\n<a name=\"timeFormatRuRu\" href=\"#timeFormatRuRu\">#</a> d3.<b>timeFormatRuRu</b>\n\n[Russian (Russia)](https://github.com/d3/d3-time-format/tree/master/src/locale/ru-RU.js)\n\n<a name=\"timeFormatSvSe\" href=\"#timeFormatSvSe\">#</a> d3.<b>timeFormatSvSe</b>\n\n[Swedish (Sweden)](https://github.com/d3/d3-time-format/tree/master/src/locale/sv-SE.js)\n\n<a name=\"timeFormatZhCn\" href=\"#timeFormatZhCn\">#</a> d3.<b>timeFormatZhCn</b>\n\n[Chinese (China)](https://github.com/d3/d3-time-format/tree/master/src/locale/zh-CN.js)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/d3/d3-time-format/issues"
  },
  "_id": "d3-time-format@0.3.1",
  "_from": "d3-time-format@~0.3.0"
}
