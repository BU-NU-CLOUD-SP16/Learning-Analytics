{
  "name": "d3-path",
  "version": "0.1.5",
  "description": "Serialize Canvas path commands to SVG.",
  "keywords": [
    "d3",
    "canvas",
    "path",
    "svg",
    "graphics",
    "CanvasRenderingContext2D",
    "CanvasPathMethods",
    "Path2D"
  ],
  "homepage": "https://github.com/d3/d3-path",
  "license": "BSD-3-Clause",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "main": "build/d3-path.js",
  "jsnext:main": "index",
  "repository": {
    "type": "git",
    "url": "https://github.com/d3/d3-path.git"
  },
  "scripts": {
    "pretest": "mkdir -p build && node -e 'process.stdout.write(\"var version = \\\"\" + require(\"./package.json\").version + \"\\\"; export * from \\\"../index\\\"; export {version};\");' > build/bundle.js && rollup -f umd -n d3_path -o build/d3-path.js -- build/bundle.js",
    "test": "faucet `find test -name '*-test.js'` && eslint index.js src",
    "prepublish": "npm run test && uglifyjs build/d3-path.js -c -m -o build/d3-path.min.js && rm -f build/d3-path.zip && zip -j build/d3-path.zip -- LICENSE README.md build/d3-path.js build/d3-path.min.js",
    "postpublish": "VERSION=`node -e 'console.log(require(\"./package.json\").version)'`; git push && git push --tags && cp build/d3-path.js ../d3.github.com/d3-path.v0.1.js && cp build/d3-path.min.js ../d3.github.com/d3-path.v0.1.min.js && cd ../d3.github.com && git add d3-path.v0.1.js d3-path.v0.1.min.js && git commit -m \"d3-path ${VERSION}\" && git push"
  },
  "devDependencies": {
    "faucet": "0.0",
    "rollup": "0.25",
    "tape": "4",
    "uglify-js": "2"
  },
  "readme": "# d3-path\n\nSay you have some code that draws to a 2D canvas:\n\n```js\nfunction drawCircle(context, radius) {\n  context.moveTo(radius, 0);\n  context.arc(0, 0, radius, 0, 2 * Math.PI);\n}\n```\n\nThe d3-path module lets you take this exact code and additionally render to [SVG](http://www.w3.org/TR/SVG/paths.html). It works by [serializing](#path_toString) [CanvasPathMethods](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls to [SVG path data](http://www.w3.org/TR/SVG/paths.html#PathData). For example:\n\n```js\nvar context = d3.path();\ndrawCircle(context, 40);\npathElement.setAttribute(\"d\", context.toString());\n```\n\nNow code you write once can be used with both Canvas (for performance) and SVG (for convenience). For a practical example, see [d3-shape](https://github.com/d3/d3-shape).\n\n## Installing\n\nIf you use NPM, `npm install d3-path`. Otherwise, download the [latest release](https://github.com/d3/d3-path/releases/latest). The released bundle supports AMD, CommonJS, and vanilla environments. Create a custom build using [Rollup](https://github.com/rollup/rollup) or your preferred bundler. You can also load directly from [d3js.org](https://d3js.org):\n\n```html\n<script src=\"https://d3js.org/d3-path.v0.1.min.js\"></script>\n```\n\nIn a vanilla environment, a `d3_path` global is exported. [Try d3-path in your browser.](https://tonicdev.com/npm/d3-path)\n\n## API Reference\n\n<a name=\"path\" href=\"#path\">#</a> d3.<b>path</b>()\n\nConstructs a new path serializer that implements [CanvasPathMethods](http://www.w3.org/TR/2dcontext/#canvaspathmethods).\n\n<a name=\"path_moveTo\" href=\"#path_moveTo\">#</a> <i>path</i>.<b>moveTo</b>(<i>x</i>, <i>y</i>)\n\nMove to the specified point ⟨*x*, *y*⟩. Equivalent to [*context*.moveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-moveto) and SVG’s [“moveto” command](http://www.w3.org/TR/SVG/paths.html#PathDataMovetoCommands).\n\n<a name=\"path_closePath\" href=\"#path_closePath\">#</A> <i>path</i>.<b>closePath</b>()\n\nEnds the current subpath and causes an automatic straight line to be drawn from the current point to the initial point of the current subpath. Equivalent to [*context*.closePath](http://www.w3.org/TR/2dcontext/#dom-context-2d-closepath) and SVG’s [“closepath” command](http://www.w3.org/TR/SVG/paths.html#PathDataClosePathCommand).\n\n<a name=\"path_lineTo\" href=\"#path_lineTo\">#</a> <i>path</i>.<b>lineTo</b>(<i>x</i>, <i>y</i>)\n\nDraws a straight line from the current point to the specified point ⟨*x*, *y*⟩. Equivalent to [*context*.lineTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-lineto) and SVG’s [“lineto” command](http://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands).\n\n<a name=\"path_quadraticCurveTo\" href=\"#path_quadraticCurveTo\">#</a> <i>path</i>.<b>quadraticCurveTo</b>(<i>cpx</i>, <i>cpy</i>, <i>x</i>, <i>y</i>)\n\nDraws a quadratic Bézier segment from the current point to the specified point ⟨*x*, *y*⟩, with the specified control point ⟨*cpx*, *cpy*⟩. Equivalent to [*context*.quadraticCurveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-quadraticcurveto) and SVG’s [quadratic Bézier curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataQuadraticBezierCommands).\n\n<a name=\"path_bezierCurveTo\" href=\"#path_bezierCurveTo\">#</a> <i>path</i>.<b>bezierCurveTo</b>(<i>cpx1</i>, <i>cpy1</i>, <i>cpx2</i>, <i>cpy2</i>, <i>x</i>, <i>y</i>)\n\nDraws a cubic Bézier segment from the current point to the specified point ⟨*x*, *y*⟩, with the specified control points ⟨*cpx1*, *cpy1*⟩ and ⟨*cpx2*, *cpy2*⟩. Equivalent to [*context*.bezierCurveTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-beziercurveto) and SVG’s [cubic Bézier curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands).\n\n<a name=\"path_arcTo\" href=\"#path_arcTo\">#</a> <i>path</i>.<b>arcTo</b>(<i>x1</i>, <i>y1</i>, <i>x2</i>, <i>y2</i>, <i>radius</i>)\n\nDraws a circular arc segment with the specified *radius* that starts tangent to the line between the current point and the specified point ⟨*x1*, *y1*⟩ and ends tangent to the line between the specified points ⟨*x1*, *y1*⟩ and ⟨*x2*, *y2*⟩. If the first tangent point is not equal to the current point, a straight line is drawn between the current point and the first tangent point. Equivalent to [*context*.arcTo](http://www.w3.org/TR/2dcontext/#dom-context-2d-arcto) and uses SVG’s [elliptical arc curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands).\n\n<a name=\"path_arc\" href=\"#path_arc\">#</a> <i>path</i>.<b>arc</b>(<i>x</i>, <i>y</i>, <i>radius</i>, <i>startAngle</i>, <i>endAngle</i>[, <i>anticlockwise</i>])\n\nDraws a circular arc segment with the specified center ⟨*x*, *y*⟩, *radius*, *startAngle* and *endAngle*. If *anticlockwise* is true, the arc is drawn in the anticlockwise direction; otherwise, it is drawn in the clockwise direction. If the current point is not equal to the starting point of the arc, a straight line is drawn from the current point to the start of the arc. Equivalent to [*context*.arc](http://www.w3.org/TR/2dcontext/#dom-context-2d-arc) and uses SVG’s [elliptical arc curve commands](http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands).\n\n<a name=\"path_rect\" href=\"#path_rect\">#</a> <i>path</i>.<b>rect</b>(<i>x</i>, <i>y</i>, <i>w</i>, <i>h</i>)\n\nCreates a new subpath containing just the four points ⟨*x*, *y*⟩, ⟨*x* + *w*, *y*⟩, ⟨*x* + *w*, *y* + *h*⟩, ⟨*x*, *y* + *h*⟩, with those four points connected by straight lines, and then marks the subpath as closed. Equivalent to [*context*.rect](http://www.w3.org/TR/2dcontext/#dom-context-2d-rect) and uses SVG’s [“lineto” commands](http://www.w3.org/TR/SVG/paths.html#PathDataLinetoCommands).\n\n<a name=\"path_toString\" href=\"#path_toString\">#</a> <i>path</i>.<b>toString</b>()\n\nReturns the string representation of this *path* according to SVG’s [path data specficiation](http://www.w3.org/TR/SVG/paths.html#PathData).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/d3/d3-path/issues"
  },
  "_id": "d3-path@0.1.5",
  "_from": "d3-path@~0.1.3"
}
