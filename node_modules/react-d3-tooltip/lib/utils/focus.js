"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _d = require('d3');

var _d2 = _interopRequireDefault(_d);

var _reactFauxDom = require('react-faux-dom');

var _reactFauxDom2 = _interopRequireDefault(_reactFauxDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Focus = function (_Component) {
  _inherits(Focus, _Component);

  function Focus(props) {
    _classCallCheck(this, Focus);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Focus).call(this, props));
  }

  _createClass(Focus, [{
    key: '_mkFocus',
    value: function _mkFocus(dom) {
      var _props = this.props;
      var height = _props.height;
      var focusX = _props.focusX;
      var focusY = _props.focusY;
      var contentTooltip = _props.contentTooltip;


      var focusDom = _d2.default.select(dom).append("g").attr("transform", 'translate(' + focusX + ',' + focusY + ')').attr("class", "react-d3-basics__voronoi_utils__focus");

      focusDom.append("circle").attr("class", "focus__inner_circle").attr("r", 3).style('fill', function () {
        return contentTooltip ? contentTooltip.color : '#CCC';
      });

      focusDom.append("circle").attr("class", "focus__outer_circle").attr("r", 7).style('fill', 'none').style('stroke', "#CCC").style('stroke-width', 3);

      focusDom.append("line").attr("class", "focus__line").attr("x1", 0).attr("y1", -height).attr("x2", 0).attr("y2", height).style('stroke', "#CCC").style("stroke-width", 2).style("stroke-opacity", 0.5);

      return focusDom;
    }
  }, {
    key: 'render',
    value: function render() {
      var focusDom = _reactFauxDom2.default.createElement('g');
      focusDom.setAttribute("class", "react-d3-basics__voronoi_utils__focus");

      var focus = this._mkFocus(focusDom);

      return focus.node().toReact();
    }
  }]);

  return Focus;
}(_react.Component);

exports.default = Focus;
module.exports = exports['default'];