"use strict";
Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SimpleTooltipStyle = function (_Component) {
  _inherits(SimpleTooltipStyle, _Component);

  function SimpleTooltipStyle(props) {
    _classCallCheck(this, SimpleTooltipStyle);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(SimpleTooltipStyle).call(this, props));
  }

  _createClass(SimpleTooltipStyle, [{
    key: 'render',
    value: function render() {
      var _props$contentTooltip = this.props.contentTooltip;
      var title = _props$contentTooltip.title;
      var color = _props$contentTooltip.color;
      var fieldTitle = _props$contentTooltip.fieldTitle;
      var value = _props$contentTooltip.value;

      var n = title.indexOf(".");
      var firstPart = title.substring(0, n);
      var secondPart = title.substring(n+1, title.length); 

      var tooltip_bkg_style = {
        backgroundColor: 'rgba(50, 50, 50, 0.8)',
        borderRadius: '4px',
        padding: '10px',
        border: '0'
      };

      var tooltip_title = {
        color: 'white',
        fontWeight: 'bold',
        marginBottom: '5px'
      };

      var tooltip_content = {
        color: 'white'
      };

      return _react2.default.createElement(
        'div',
        { className: 'tooltip_bkg', style: tooltip_bkg_style, key: 'tooltip' },
        _react2.default.createElement(
          'div',
          { style: tooltip_title },
          secondPart,
	  ': ',
	  fieldTitle
        ),
        _react2.default.createElement(
          'div',
          { style: tooltip_content },
          firstPart,
          ': ',
          value
        )
      );
    }
  }]);

  return SimpleTooltipStyle;
}(_react.Component);

SimpleTooltipStyle.propTypes = {
  title: _react2.default.PropTypes.any,
  color: _react2.default.PropTypes.any,
  fieldTitle: _react2.default.PropTypes.string,
  value: _react2.default.PropTypes.any
};
exports.default = SimpleTooltipStyle;
module.exports = exports['default'];
